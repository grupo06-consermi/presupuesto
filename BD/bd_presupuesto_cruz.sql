--
-- Script was generated by Devart dbForge Studio for MySQL, Version 7.1.31.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 03/07/2019 07:35:27 p.m.
-- Server version: 5.5.5-10.1.21-MariaDB
-- Client version: 4.1
--


/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

SET NAMES 'utf8';

CREATE TABLE almacen (
  alm_codigo INT(11) NOT NULL AUTO_INCREMENT,
  alm_nombre VARCHAR(45) NOT NULL,
  alm_direccion VARCHAR(100) NOT NULL,
  PRIMARY KEY (alm_codigo)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE categoria (
  cat_cod INT(11) NOT NULL AUTO_INCREMENT,
  cat_nombre CHAR(8) NOT NULL,
  cat_estado TINYINT(1) NOT NULL,
  PRIMARY KEY (cat_cod),
  UNIQUE INDEX cat_nombre_UQ (cat_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE cliente (
  cli_codigo INT(11) NOT NULL AUTO_INCREMENT,
  cli_razon_social VARCHAR(45) NOT NULL,
  cli_ruc VARCHAR(45) DEFAULT NULL,
  cli_direccion VARCHAR(45) DEFAULT NULL,
  cli_telefono CHAR(9) DEFAULT NULL,
  cli_email VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (cli_codigo),
  UNIQUE INDEX cli_email_UQ (cli_email),
  UNIQUE INDEX cli_ruc_UQ (cli_ruc),
  UNIQUE INDEX cli_telefono_UQ (cli_telefono)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE marca (
  mar_codigo INT(11) NOT NULL AUTO_INCREMENT,
  mar_nombre VARCHAR(45) DEFAULT NULL,
  mar_estado TINYINT(1) NOT NULL,
  PRIMARY KEY (mar_codigo),
  UNIQUE INDEX mar_nombre_UQ (mar_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE proveedor (
  prov_cod INT(11) NOT NULL AUTO_INCREMENT,
  prov_razon_social CHAR(100) DEFAULT NULL,
  prov_ruc CHAR(11) NOT NULL,
  prov_direccion VARCHAR(50) DEFAULT NULL,
  prov_telefono CHAR(9) NOT NULL,
  prov_email CHAR(50) DEFAULT NULL,
  PRIMARY KEY (prov_cod),
  UNIQUE INDEX proveedor_UQ (prov_telefono, prov_ruc)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE rol (
  rol_cod INT(11) NOT NULL AUTO_INCREMENT,
  rol_nombre VARCHAR(50) NOT NULL,
  rol_fecha_reg DATETIME NOT NULL,
  rol_estado TINYINT(4) NOT NULL,
  PRIMARY KEY (rol_cod)
)
ENGINE = INNODB
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

CREATE TABLE tipo_documento (
  tdoc_cod INT(11) NOT NULL AUTO_INCREMENT,
  tdoc_nombre CHAR(20) NOT NULL,
  tdoc_estado TINYINT(1) NOT NULL,
  PRIMARY KEY (tdoc_cod),
  UNIQUE INDEX tdoc_nombre_UNIQUE (tdoc_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE unidad_medida (
  uni_codigo INT(11) NOT NULL AUTO_INCREMENT,
  uni_descripcion VARCHAR(45) NOT NULL,
  uni_estado TINYINT(1) DEFAULT NULL,
  PRIMARY KEY (uni_codigo),
  UNIQUE INDEX descripcion_UQ (uni_descripcion)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE compra (
  comp_cod INT(11) NOT NULL AUTO_INCREMENT,
  comp_fecha DATE DEFAULT NULL,
  comp_costo_total DOUBLE(8, 2) UNSIGNED DEFAULT NULL,
  comp_estado CHAR(12) DEFAULT NULL,
  prov_cod INT(11) DEFAULT NULL,
  PRIMARY KEY (comp_cod),
  INDEX prov_cod_idx (prov_cod),
  CONSTRAINT prov_cod FOREIGN KEY (prov_cod)
    REFERENCES proveedor(prov_cod) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE empleado (
  emp_codigo INT(11) NOT NULL AUTO_INCREMENT,
  emp_nombre VARCHAR(45) NOT NULL,
  emp_ape_pat VARCHAR(45) NOT NULL,
  emp_ape_mat VARCHAR(45) NOT NULL,
  emp_direccion VARCHAR(45) NOT NULL,
  emp_telefono CHAR(9) DEFAULT NULL,
  emp_fecha_inicio_trabajo DATE DEFAULT NULL,
  emp_fecha_fin_trabajo DATE DEFAULT NULL,
  emp_estado TINYINT(1) DEFAULT 1,
  emp_sexo TINYINT(1) DEFAULT NULL,
  tdoc_cod INT(11) DEFAULT NULL,
  emp_numero_doc CHAR(12) DEFAULT NULL,
  emp_correo VARCHAR(50) DEFAULT NULL,
  PRIMARY KEY (emp_codigo),
  UNIQUE INDEX emp_dni_UQ (emp_numero_doc),
  UNIQUE INDEX emp_telefono_UQ (emp_telefono),
  INDEX tdoc_cod_idx (tdoc_cod),
  CONSTRAINT tdoc_cod FOREIGN KEY (tdoc_cod)
    REFERENCES tipo_documento(tdoc_cod) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE presupuesto (
  pres_cod INT(11) NOT NULL AUTO_INCREMENT,
  pres_fecha_emision DATE NOT NULL,
  pres_fecha_recepcion DATE DEFAULT NULL,
  pres_forma_pago CHAR(30) DEFAULT NULL,
  pres_lugar_trabajo VARCHAR(45) DEFAULT NULL,
  pres_estado VARCHAR(45) DEFAULT NULL,
  pres_costo_mano_obra DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  pres_costo_materiales DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  pres_costo_total DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  cli_codigo INT(11) NOT NULL,
  pres_encargado VARCHAR(100) NOT NULL,
  PRIMARY KEY (pres_cod),
  CONSTRAINT FK_presupuesto_cliente FOREIGN KEY (cli_codigo)
    REFERENCES cliente(cli_codigo) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE producto (
  prod_cod INT(11) NOT NULL AUTO_INCREMENT,
  prod_nombre_comercial VARCHAR(150) NOT NULL,
  prod_precio_compra DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  prod_precio_venta DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  prod_cant DECIMAL(8, 0) UNSIGNED DEFAULT NULL,
  prov_cod INT(11) DEFAULT NULL,
  mar_codigo INT(11) DEFAULT NULL,
  cat_codigo INT(11) DEFAULT NULL,
  uni_codigo INT(11) DEFAULT NULL,
  alm_codigo INT(11) DEFAULT NULL,
  PRIMARY KEY (prod_cod),
  INDEX alm_codigo_idx (alm_codigo),
  INDEX cat_codigo_idx (cat_codigo),
  INDEX mar_codigo_idx (mar_codigo),
  INDEX prov_codigo_idx (prov_cod),
  INDEX uni_codigo_idx (uni_codigo),
  CONSTRAINT alm_codigo FOREIGN KEY (alm_codigo)
    REFERENCES almacen(alm_codigo) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT cat_cod FOREIGN KEY (cat_codigo)
    REFERENCES categoria(cat_cod) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT mar_codigo FOREIGN KEY (mar_codigo)
    REFERENCES marca(mar_codigo) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT pro_codigo FOREIGN KEY (prov_cod)
    REFERENCES proveedor(prov_cod) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT uni_codigo FOREIGN KEY (uni_codigo)
    REFERENCES unidad_medida(uni_codigo) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE actividad (
  act_cod INT(11) NOT NULL AUTO_INCREMENT,
  act_descripcion VARCHAR(100) DEFAULT NULL,
  act_costo_total DECIMAL(8, 2) DEFAULT NULL,
  pres_cod INT(11) DEFAULT NULL,
  PRIMARY KEY (act_cod),
  CONSTRAINT FK_actividad_presupuesto FOREIGN KEY (pres_cod)
    REFERENCES presupuesto(pres_cod) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE compra_detalle (
  cdet_cod INT(11) NOT NULL AUTO_INCREMENT,
  cdet_cantidad INT(11) UNSIGNED DEFAULT NULL,
  cdet_total DOUBLE(8, 2) UNSIGNED DEFAULT NULL,
  prod_cod INT(11) NOT NULL,
  comp_cod INT(11) DEFAULT NULL,
  PRIMARY KEY (cdet_cod),
  INDEX comp_cod_idx (comp_cod),
  INDEX prod_cod_idx (prod_cod),
  CONSTRAINT comp_cod FOREIGN KEY (comp_cod)
    REFERENCES compra(comp_cod) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_compra_detalle_producto FOREIGN KEY (prod_cod)
    REFERENCES producto(prod_cod) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE conformidad (
  conf_cod INT(11) NOT NULL AUTO_INCREMENT,
  conf_fecha_inicio DATE DEFAULT NULL,
  conf_fecha_fin DATE DEFAULT NULL,
  conf_estado CHAR(3) DEFAULT NULL,
  conf_act_conformidad INT(11) UNSIGNED DEFAULT NULL,
  pres_cod INT(11) NOT NULL,
  PRIMARY KEY (conf_cod),
  UNIQUE INDEX conf_act_conformidad_UQ (conf_act_conformidad),
  CONSTRAINT FK_conformidad_presupuesto FOREIGN KEY (pres_cod)
    REFERENCES presupuesto(pres_cod) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE detalle_presupuesto (
  pre_cod INT(11) NOT NULL,
  pro_cod INT(11) NOT NULL,
  dpre_cantidad DECIMAL(8, 2) UNSIGNED NOT NULL,
  dpre_precio DECIMAL(8, 2) UNSIGNED NOT NULL,
  PRIMARY KEY (pre_cod, pro_cod),
  CONSTRAINT FK_detalle_presupuesto_presupuesto FOREIGN KEY (pre_cod)
    REFERENCES presupuesto(pres_cod) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_detalle_presupuesto_producto FOREIGN KEY (pro_cod)
    REFERENCES producto(prod_cod) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE orden_ejecucion (
  ord_cod INT(11) NOT NULL,
  ord_num_orden INT(11) UNSIGNED DEFAULT NULL,
  ord_fecha DATE DEFAULT NULL,
  ord_odm INT(11) UNSIGNED DEFAULT NULL,
  ord_emisor CHAR(100) DEFAULT NULL,
  pres_cod INT(11) NOT NULL,
  ord_estado CHAR(3) DEFAULT NULL,
  PRIMARY KEY (ord_cod),
  UNIQUE INDEX ord_num_orden_UNIQUE (ord_num_orden),
  UNIQUE INDEX ord_odm_UNIQUE (ord_odm),
  INDEX pres_cod_idx (pres_cod),
  CONSTRAINT pres_cod FOREIGN KEY (pres_cod)
    REFERENCES presupuesto(pres_cod) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE usuario (
  usu_cod INT(11) NOT NULL AUTO_INCREMENT,
  emp_codigo INT(11) NOT NULL,
  usu_nombre VARCHAR(50) NOT NULL,
  usu_clave VARCHAR(50) NOT NULL,
  rol_cod INT(11) NOT NULL,
  usu_ultimo_acceso DATETIME DEFAULT NULL,
  usu_fecha_reg DATETIME NOT NULL,
  usu_situacion CHAR(1) NOT NULL,
  usu_estado CHAR(1) NOT NULL,
  PRIMARY KEY (usu_cod),
  UNIQUE INDEX `Índice 1` (usu_nombre),
  CONSTRAINT FK_usuario_empleado_emp_codigo FOREIGN KEY (emp_codigo)
    REFERENCES empleado(emp_codigo) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_usuario_rol_rol_cod FOREIGN KEY (rol_cod)
    REFERENCES rol(rol_cod) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE actividad_empleado (
  aemp_codigo INT(11) NOT NULL AUTO_INCREMENT,
  aemp_cantidad_dias TINYINT(3) UNSIGNED DEFAULT NULL,
  aemp_pago_dia DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  aemp_total DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  emp_cod INT(11) NOT NULL,
  act_cod INT(11) NOT NULL,
  PRIMARY KEY (aemp_codigo),
  INDEX act_cod_idx (act_cod),
  INDEX emp_cod_idx (emp_cod),
  CONSTRAINT act_cod FOREIGN KEY (act_cod)
    REFERENCES actividad(act_cod) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT emp_cod FOREIGN KEY (emp_cod)
    REFERENCES empleado(emp_codigo) ON DELETE NO ACTION ON UPDATE NO ACTION
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

CREATE TABLE actividad_productos (
  actpro_cod INT(11) NOT NULL AUTO_INCREMENT,
  act_cod INT(11) DEFAULT NULL,
  prod_cod INT(11) DEFAULT NULL,
  actpro_precio DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  actpro_cantidad INT(11) UNSIGNED DEFAULT NULL,
  actpro_total DECIMAL(8, 2) UNSIGNED DEFAULT NULL,
  PRIMARY KEY (actpro_cod),
  CONSTRAINT FK_actividad_productos_actividad FOREIGN KEY (act_cod)
    REFERENCES actividad(act_cod) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT FK_actividad_productos_producto FOREIGN KEY (prod_cod)
    REFERENCES producto(prod_cod) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

DELIMITER $$

CREATE PROCEDURE PA_actividad_x_Cod(IN `p_act_cod` INT(11))
BEGIN
SELECT `act_cod`, `act_descripcion`, `act_costo_total`, `pres_cod`
FROM `actividad`
WHERE `act_cod` = p_act_cod;
END
$$

CREATE PROCEDURE PA_Actualizar_almacen(IN `p_alm_codigo` INT(11), IN `p_alm_nombre` VARCHAR(45), IN `p_alm_direccion` VARCHAR(100))
BEGIN
UPDATE `almacen` 
SET `alm_nombre` = p_alm_nombre, `alm_direccion` = p_alm_direccion
WHERE `alm_codigo` = p_alm_codigo;
END
$$

CREATE PROCEDURE PA_Actualizar_categoria(IN `p_cat_cod` INT(11), IN `p_cat_nombre` CHAR(8), IN `p_cat_estado` TINYINT)
BEGIN
UPDATE `categoria` 
SET `cat_nombre` = p_cat_nombre, `cat_estado` = p_cat_estado
WHERE `cat_cod` = p_cat_cod;
END
$$

CREATE PROCEDURE PA_Actualizar_cliente(IN `p_cli_codigo` INT(11), IN `p_cli_razon_social` VARCHAR(45), IN `p_cli_ruc` VARCHAR(45), IN `p_cli_direccion` VARCHAR(45), IN `p_cli_telefono` CHAR(9), IN `p_cli_email` VARCHAR(100))
BEGIN
UPDATE `cliente` 
SET `cli_razon_social` = p_cli_razon_social, `cli_ruc` = p_cli_ruc, `cli_direccion` = p_cli_direccion, `cli_telefono` = p_cli_telefono, 
`cli_email` = p_cli_email
WHERE `cli_codigo` = p_cli_codigo;
END
$$

CREATE PROCEDURE PA_Actualizar_empleado(IN `p_emp_codigo` INT(11), IN `p_emp_nombre` VARCHAR(45), IN `p_emp_ape_pat` VARCHAR(45), IN `p_emp_ape_mat` VARCHAR(45), IN `p_emp_direccion` VARCHAR(45), IN `p_emp_telefono` CHAR(9), IN `p_emp_fecha_fin_trabajo` DATETIME, IN `p_emp_estado` TINYINT, IN `p_emp_sexo` TINYINT, IN `p_tdoc_cod` INT(11), IN `p_emp_numero_doc` CHAR(12), IN `p_emp_correo` VARCHAR(50))
BEGIN
UPDATE `empleado` 
SET `emp_nombre` = p_emp_nombre, `emp_ape_pat` = p_emp_ape_pat, `emp_ape_mat` = p_emp_ape_mat, `emp_direccion` = p_emp_direccion, 
`emp_telefono` = p_emp_telefono,  `emp_fecha_fin_trabajo` = p_emp_fecha_fin_trabajo, `emp_estado` = p_emp_estado, 
`emp_sexo` = p_emp_sexo, `tdoc_cod` = p_tdoc_cod, `emp_numero_doc` = p_emp_numero_doc, `emp_correo` = p_emp_correo
WHERE `emp_codigo` = p_emp_codigo;
END
$$

CREATE PROCEDURE PA_Actualizar_marca(IN `p_mar_codigo` INT(11), IN `p_mar_nombre` VARCHAR(45), IN `p_mar_estado` CHAR(8))
BEGIN
UPDATE `marca` 
SET `mar_nombre` = p_mar_nombre, `mar_estado` = p_mar_estado
WHERE `mar_codigo` = p_mar_codigo;
END
$$

CREATE PROCEDURE PA_Actualizar_orden_ejecucion(IN `p_ord_cod` INT(11), IN `p_ord_num_orden` INT(11) UNSIGNED, IN `p_ord_fecha` DATE, IN `p_ord_odm` INT(11) UNSIGNED, IN `p_ord_emisor` CHAR(100), IN `p_pres_cod` INT(11), IN `p_ord_estado` CHAR(3))
BEGIN
UPDATE `orden_ejecucion` 
SET `ord_num_orden` = p_ord_num_orden, `ord_fecha` = p_ord_fecha, `ord_odm` = p_ord_odm, `ord_emisor` = p_ord_emisor, 
`pres_cod` = p_pres_cod, `ord_estado` = p_ord_estado
WHERE `ord_cod` = p_ord_cod;
END
$$

CREATE PROCEDURE PA_Actualizar_presupuesto(IN `p_pres_cod` INT(11), IN `p_pres_fecha_emision` DATE, IN `p_pres_fecha_recepcion` DATE, IN `p_pres_forma_pago` CHAR(30), IN `p_pres_lugar_trabajo` VARCHAR(45), IN `p_pres_estado` VARCHAR(45), IN `p_pres_costo_mano_obra` DECIMAL(8,2) UNSIGNED, IN `p_pres_costo_materiales` DECIMAL(8,2) UNSIGNED, IN `p_pres_costo_total` DECIMAL(8,2) UNSIGNED, IN `p_cli_codigo` INT(11), IN `p_pres_encargado` VARCHAR(100))
BEGIN
UPDATE `presupuesto` 
SET `pres_fecha_emision` = p_pres_fecha_emision, `pres_fecha_recepcion` = p_pres_fecha_recepcion, `pres_forma_pago` = p_pres_forma_pago, `pres_lugar_trabajo` = p_pres_lugar_trabajo, 
`pres_estado` = p_pres_estado, `pres_costo_mano_obra` = p_pres_costo_mano_obra, `pres_costo_materiales` = p_pres_costo_materiales, `pres_costo_total` = p_pres_costo_total, 
`cli_codigo` = p_cli_codigo, `pres_encargado` = p_pres_encargado
WHERE `pres_cod` = p_pres_cod;
END
$$

CREATE PROCEDURE PA_Actualizar_proveedor(IN `p_prov_cod` INT(11), IN `p_prov_razon_social` CHAR(100), IN `p_prov_ruc` CHAR(11), IN `p_prov_direccion` VARCHAR(50), IN `p_prov_telefono` CHAR(9), IN `p_prov_email` CHAR(50))
BEGIN
UPDATE `proveedor` 
SET `prov_razon_social` = p_prov_razon_social, `prov_ruc` = p_prov_ruc, `prov_direccion` = p_prov_direccion, `prov_telefono` = p_prov_telefono, 
`prov_email` = p_prov_email
WHERE `prov_cod` = p_prov_cod;
END
$$

CREATE PROCEDURE pa_actualizar_tdocumento(IN `t_tdoc_cod` INT, IN `t_tdoc_nombre` CHAR(50), IN `t_tdoc_estado` TINYINT)
BEGIN
UPDATE `tipo_documento` 
SET `tdoc_nombre` = t_tdoc_nombre, `tdoc_estado` = t_tdoc_estado
WHERE `tdoc_cod` = t_tdoc_cod;
END
$$

CREATE PROCEDURE PA_Actualizar_unidad_medida(IN `p_uni_codigo` INT(11), IN `p_uni_descripcion` VARCHAR(45), IN `p_uni_estado` CHAR(8))
BEGIN
UPDATE `unidad_medida` 
SET `uni_descripcion` = p_uni_descripcion, `uni_estado` = p_uni_estado
WHERE `uni_codigo` = p_uni_codigo;
END
$$

CREATE PROCEDURE PA_almacen_x_Cod(IN `p_alm_codigo` INT(11))
BEGIN
SELECT `alm_codigo`, `alm_nombre`, `alm_direccion`
FROM `almacen`
WHERE `alm_codigo` = p_alm_codigo;
END
$$

CREATE PROCEDURE PA_Borrar_almacen(IN `p_alm_codigo` INT(11))
BEGIN
DELETE FROM `almacen`
WHERE `alm_codigo` = p_alm_codigo;
END
$$

CREATE PROCEDURE PA_Borrar_categoria(IN `p_cat_cod` INT(11))
BEGIN
DELETE FROM `categoria`
WHERE `cat_cod` = p_cat_cod;
END
$$

CREATE PROCEDURE PA_Borrar_cliente(IN `p_cli_codigo` INT(11))
BEGIN
DELETE FROM `cliente`
WHERE `cli_codigo` = p_cli_codigo;
END
$$

CREATE PROCEDURE PA_Borrar_empleado(IN `p_emp_codigo` INT(11))
BEGIN
DELETE FROM `empleado`
WHERE `emp_codigo` = p_emp_codigo;
END
$$

CREATE PROCEDURE PA_Borrar_marca(IN `p_mar_codigo` INT(11))
BEGIN
DELETE FROM `marca`
WHERE `mar_codigo` = p_mar_codigo;
END
$$

CREATE PROCEDURE PA_Borrar_orden_ejecucion(IN `p_ord_cod` INT(11))
BEGIN
DELETE FROM `orden_ejecucion`
WHERE `ord_cod` = p_ord_cod;
END
$$

CREATE PROCEDURE PA_Borrar_presupuesto(IN `p_pres_cod` INT(11))
BEGIN
DELETE FROM `presupuesto`
WHERE `pres_cod` = p_pres_cod;
END
$$

CREATE PROCEDURE pa_borrar_producto(IN `id` INT)
BEGIN
DELETE FROM producto WHERE prod_cod = id;
END
$$

CREATE PROCEDURE PA_Borrar_proveedor(IN `p_prov_cod` INT(11))
BEGIN
DELETE FROM `proveedor`
WHERE `prov_cod` = p_prov_cod;
END
$$

CREATE PROCEDURE PA_borrar_tdoc(IN `t_tdoc_cod` INT)
BEGIN
DELETE FROM `tipo_documento`
WHERE `tdoc_cod` = t_tdoc_cod;
END
$$

CREATE PROCEDURE PA_Borrar_unidad_medida(IN `p_uni_codigo` INT(11))
BEGIN
DELETE FROM `unidad_medida`
WHERE `uni_codigo` = p_uni_codigo;
END
$$

CREATE PROCEDURE PA_categoria_x_Cod(IN `p_cat_cod` INT(11))
BEGIN
SELECT `cat_cod`, `cat_nombre`, `cat_estado`
FROM `categoria`
WHERE `cat_cod` = p_cat_cod;
END
$$

CREATE PROCEDURE PA_cliente_x_Cod(IN `p_cli_codigo` INT(11))
BEGIN
SELECT `cli_codigo`, `cli_razon_social`, `cli_ruc`, `cli_direccion`, 
`cli_telefono`, `cli_email`
FROM `cliente`
WHERE `cli_codigo` = p_cli_codigo;
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_activate(
	IN _pre_cod int(11),
	IN _pro_cod int(11)
)
BEGIN
	-- detalle_presupuesto no tiene columna estado
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_deactivate(
	IN _pre_cod int(11),
	IN _pro_cod int(11)
)
BEGIN
	-- detalle_presupuesto no tiene columna estado
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_delete(
	IN _pre_cod int(11),
	IN _pro_cod int(11)
)
BEGIN
	-- detalle_presupuesto no tiene columna estado
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_getByID(
	IN _pre_cod int(11),
	IN _pro_cod int(11)
)
BEGIN
	SELECT pres_cod, prod_cod, dpre_cantidad, dpre_precio
	FROM detalle_presupuesto dpre
		INNER JOIN presupuesto pre ON dpre.pre_cod = pre.pres_cod
		INNER JOIN producto pro ON dpre.pro_cod = pro.prod_cod
	WHERE dpre.pre_cod = _pre_cod
		AND dpre.pro_cod = _pro_cod;
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_getRow(
	IN _pre_cod int(11),
	IN _pro_cod int(11)
)
BEGIN
	SELECT pres_cod, prod_cod, dpre_cantidad, dpre_precio
	FROM detalle_presupuesto dpre
		INNER JOIN presupuesto pre ON dpre.pre_cod = pre.pres_cod
		INNER JOIN producto pro ON dpre.pro_cod = pro.prod_cod
	WHERE dpre.pre_cod = _pre_cod
		AND dpre.pro_cod = _pro_cod;
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_insert(
	IN _pre_cod int(11),
	IN _pro_cod int(11),
	IN _dpre_cantidad decimal(8, 2),
	IN _dpre_precio decimal(8, 2)
)
BEGIN
	INSERT INTO detalle_presupuesto (
		pre_cod,
		pro_cod,
		dpre_cantidad,
		dpre_precio
	)
	VALUES (
		_pre_cod,
		_pro_cod,
		_dpre_cantidad,
		_dpre_precio
	);
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_list(
	IN _buscar varchar(50) 
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT pres_cod, prod_cod, dpre_cantidad, dpre_precio
	FROM detalle_presupuesto dpre
		INNER JOIN presupuesto pre ON dpre.pre_cod = pre.pres_cod
		INNER JOIN producto pro ON dpre.pro_cod = pro.prod_cod;
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_listCbo(
	IN _pre_cod int(11),
	IN _pro_cod int(11)
)
BEGIN
	SELECT pres_cod, prod_cod, dpre_cantidad, dpre_precio
	FROM detalle_presupuesto dpre
		INNER JOIN presupuesto pre ON dpre.pre_cod = pre.pres_cod
		INNER JOIN producto pro ON dpre.pro_cod = pro.prod_cod;
END
$$

CREATE PROCEDURE pa_detalle_presupuesto_update(
	IN _pre_cod int(11),
	IN _pro_cod int(11),
	IN _dpre_cantidad decimal(8, 2),
	IN _dpre_precio decimal(8, 2)
)
BEGIN
	UPDATE detalle_presupuesto
	SET pre_cod = _pre_cod,
		pro_cod = _pro_cod,
		dpre_cantidad = _dpre_cantidad,
		dpre_precio = _dpre_precio
	WHERE pre_cod = _pre_cod
	  AND pro_cod = _pro_cod;
END
$$

CREATE PROCEDURE pa_empleado_listCbo(IN `_emp_codigo` INT(11))
BEGIN
	SELECT emp_codigo, emp_nombre, emp_ape_pat, emp_ape_mat, emp_direccion, emp_telefono,
		   emp_fecha_inicio_trabajo, emp_fecha_fin_trabajo, emp_estado, emp_sexo,
		   tdoc.tdoc_cod, tdoc_nombre, emp_numero_doc
	FROM empleado emp
		LEFT JOIN tipo_documento tdoc ON emp.tdoc_cod = tdoc.tdoc_cod
	WHERE emp.emp_estado = 1 OR (emp.emp_codigo = _emp_codigo);
END
$$

CREATE PROCEDURE PA_empleado_Por_Codigo(IN `p_emp_codigo` INT(11))
BEGIN
SELECT `emp_codigo`, `emp_nombre`, `emp_ape_pat`, `emp_ape_mat`, 
`emp_direccion`, `emp_telefono`, `emp_fecha_inicio_trabajo`, `emp_fecha_fin_trabajo`, 
`emp_estado`, `emp_sexo`, `tdoc_cod`, `emp_numero_doc`, 
`emp_correo`
FROM `empleado`
WHERE `emp_codigo` = p_emp_codigo;
END
$$

CREATE PROCEDURE PA_Listar_categoria(IN `buscar` VARCHAR(50))
BEGIN
SELECT * FROM categoria WHERE cat_nombre LIKE buscar;
END
$$

CREATE PROCEDURE pa_listar_cliente(IN `buscar` CHAR(50))
BEGIN
SELECT * FROM cliente WHERE cli_razon_social LIKE buscar;
END
$$

CREATE PROCEDURE PA_Listar_compra()
BEGIN
SELECT `comp_cod`, `comp_fecha`, `comp_costo_total`, `comp_estado`, 
`prov_cod`
FROM `compra`;
END
$$

CREATE PROCEDURE Pa_Listar_empleado(IN `buscar` CHAR(50))
BEGIN
SELECT * FROM empleado WHERE emp_nombre LIKE buscar;
END
$$

CREATE PROCEDURE PA_Listar_marca(IN `buscar` VARCHAR(50))
BEGIN
SELECT * FROM marca WHERE mar_nombre LIKE buscar;
END
$$

CREATE PROCEDURE pa_listar_marca_estado(IN `estado` TINYINT(1), IN `buscar` VARCHAR(50))
BEGIN
SELECT * FROM marca WHERE mar_estado = estado AND mar_nombre LIKE buscar;
END
$$

CREATE PROCEDURE PA_Listar_presupuesto()
BEGIN
SELECT `pres_cod`, `pres_fecha_emision`, `pres_fecha_recepcion`, `pres_forma_pago`, 
`pres_lugar_trabajo`, `pres_estado`, `pres_costo_mano_obra`, `pres_costo_materiales`, 
`pres_costo_total`, `cli_codigo`, `pres_encargado`
FROM `presupuesto`;
END
$$

CREATE PROCEDURE PA_Listar_producto()
BEGIN
SELECT `p`.`prod_cod`, `p`.`prod_nombre_comercial`, `p`.`prod_precio_compra`, `p`.`prod_precio_venta`, `p`.`prod_cant`,
`p`.`mar_codigo`, `p`.`cat_codigo`, `p`.`uni_codigo`, `p`.`alm_codigo`,
m.mar_nombre, c.cat_nombre, a.alm_nombre, u.uni_descripcion
FROM `producto` `p` INNER JOIN marca m ON p.mar_codigo = m.mar_codigo
INNER JOIN categoria c ON p.cat_codigo = c.cat_cod
INNER JOIN almacen a ON a.alm_codigo = p.alm_codigo
INNER JOIN unidad_medida u ON p.uni_codigo = u.uni_codigo;
END
$$

CREATE PROCEDURE Pa_listar_proveedor(IN `buscar` CHAR(50))
BEGIN
SELECT * FROM proveedor WHERE prov_razon_social LIKE buscar;
END
$$

CREATE PROCEDURE PA_Listar_unidad(IN `buscar` CHAR(50))
BEGIN
SELECT * FROM unidad_medida WHERE uni_descripcion LIKE buscar;
END
$$

CREATE PROCEDURE pa_lista_almacen(IN `buscar` VARCHAR(50))
BEGIN
SELECT * FROM almacen WHERE alm_nombre LIKE buscar;
END
$$

CREATE PROCEDURE pa_lista_categoria_estado(IN `estado` TINYINT(1), IN `buscar` VARCHAR(50))
BEGIN
SELECT * FROM categoria WHERE cat_estado = 1 AND cat_nombre LIKE buscar;
END
$$

CREATE PROCEDURE pa_lista_tdocumento(IN `buscar` CHAR(50))
BEGIN
SELECT * FROM tipo_documento WHERE tdoc_cod LIKE buscar;
END
$$

CREATE PROCEDURE pa_lista_unidades(IN `buscar` VARCHAR(50), IN `estado` TINYINT(1))
BEGIN
SELECT * FROM unidad_medida WHERE uni_estado = estado AND uni_descripcion LIKE buscar;
END
$$

CREATE PROCEDURE PA_marca_x_Cod(IN `p_mar_codigo` INT(11))
BEGIN
SELECT `mar_codigo`, `mar_nombre`, `mar_estado`
FROM `marca`
WHERE `mar_codigo` = p_mar_codigo;
END
$$

CREATE PROCEDURE PA_orden_ejecucion_x_Cod(IN `p_ord_cod` INT(11))
BEGIN
SELECT `ord_cod`, `ord_num_orden`, `ord_fecha`, `ord_odm`, 
`ord_emisor`, `pres_cod`, `ord_estado`
FROM `orden_ejecucion`
WHERE `ord_cod` = p_ord_cod;
END
$$

CREATE PROCEDURE pa_presupuesto_activate(
	IN _pres_cod int(11)
)
BEGIN
	UPDATE presupuesto
	SET pres_estado = 1
	WHERE pres_cod = _pres_cod;
END
$$

CREATE PROCEDURE pa_presupuesto_deactivate(
	IN _pres_cod int(11)
)
BEGIN
	UPDATE presupuesto
	SET pres_estado = 2
	WHERE pres_cod = _pres_cod;
END
$$

CREATE PROCEDURE pa_presupuesto_delete(
	IN _pres_cod int(11)
)
BEGIN
	UPDATE presupuesto
	SET pres_estado = 0
	WHERE pres_cod = _pres_cod;
END
$$

CREATE PROCEDURE pa_presupuesto_getByID(
	IN _pres_cod int(11)
)
BEGIN
	SELECT pres_cod, pres_fecha_emision, pres_fecha_recepcion, pres_forma_pago,
		   pres_lugar_trabajo, pres_estado, pres_costo_mano_obra, pres_costo_materiales,
		   pres_costo_total, cli.cli_codigo, cli_razon_social, pres_encargado
	FROM presupuesto pre
		INNER JOIN cliente cli ON pre.cli_codigo = cli.cli_codigo
	WHERE pre.pres_cod = _pres_cod;
END
$$

CREATE PROCEDURE pa_presupuesto_getRow(
	IN _pres_cod int(11)
)
BEGIN
	SELECT pres_cod, pres_fecha_emision, pres_fecha_recepcion, pres_forma_pago,
		   pres_lugar_trabajo, pres_estado, pres_costo_mano_obra, pres_costo_materiales,
		   pres_costo_total, cli.cli_codigo, cli_razon_social, pres_encargado
	FROM presupuesto pre
		INNER JOIN cliente cli ON pre.cli_codigo = cli.cli_codigo
	WHERE pre.pres_cod = _pres_cod;
END
$$

CREATE PROCEDURE pa_presupuesto_insert(
	IN _pres_fecha_emision date,
	IN _pres_fecha_recepcion date,
	IN _pres_forma_pago char(30),
	IN _pres_lugar_trabajo varchar(45),
	IN _pres_costo_mano_obra decimal(8, 2),
	IN _pres_costo_materiales decimal(8, 2),
	IN _pres_costo_total decimal(8, 2),
	IN _cli_codigo int(11),
	IN _pres_encargado varchar(100),
	OUT _pres_cod int(11)
)
BEGIN
	INSERT INTO presupuesto (
		pres_fecha_emision,
		pres_fecha_recepcion,
		pres_forma_pago,
		pres_lugar_trabajo,
		pres_estado,
		pres_costo_mano_obra,
		pres_costo_materiales,
		pres_costo_total,
		cli_codigo,
		pres_encargado
	)
	VALUES (
		_pres_fecha_emision,
		_pres_fecha_recepcion,
		_pres_forma_pago,
		_pres_lugar_trabajo,
		1,
		_pres_costo_mano_obra,
		_pres_costo_materiales,
		_pres_costo_total,
		_cli_codigo,
		_pres_encargado
	);
	SET _pres_cod = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_presupuesto_list(
	IN _buscar varchar(50),
	IN _pres_estado tinyint unsigned 
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT pres_cod, pres_fecha_emision, pres_fecha_recepcion, pres_forma_pago,
		   pres_lugar_trabajo, pres_estado, pres_costo_mano_obra, pres_costo_materiales,
		   pres_costo_total, cli.cli_codigo, cli_razon_social, pres_encargado
	FROM presupuesto pre
		INNER JOIN cliente cli ON pre.cli_codigo = cli.cli_codigo
	WHERE pre.pres_estado = _pres_estado;
END
$$

CREATE PROCEDURE pa_presupuesto_listar(IN `buscar` VARCHAR(70))
BEGIN
SELECT *, c.cli_razon_social
FROM presupuesto p 
INNER JOIN cliente c ON p.cli_codigo = c.cli_codigo
WHERE c.cli_razon_social LIKE buscar OR p.pres_lugar_trabajo LIKE buscar
OR p.pres_encargado LIKE buscar;
END
$$

CREATE PROCEDURE pa_presupuesto_listCbo(
	IN _pres_cod int(11)
)
BEGIN
	SELECT pres_cod, pres_fecha_emision, pres_fecha_recepcion, pres_forma_pago,
		   pres_lugar_trabajo, pres_estado, pres_costo_mano_obra, pres_costo_materiales,
		   pres_costo_total, cli.cli_codigo, cli_razon_social, pres_encargado
	FROM presupuesto pre
		INNER JOIN cliente cli ON pre.cli_codigo = cli.cli_codigo
	WHERE pre.pres_estado = 1 OR (pre.pres_cod = _pres_cod);
END
$$

CREATE PROCEDURE pa_presupuesto_update(
	IN _pres_cod int(11),
	IN _pres_fecha_emision date,
	IN _pres_fecha_recepcion date,
	IN _pres_forma_pago char(30),
	IN _pres_lugar_trabajo varchar(45),
	IN _pres_costo_mano_obra decimal(8, 2),
	IN _pres_costo_materiales decimal(8, 2),
	IN _pres_costo_total decimal(8, 2),
	IN _cli_codigo int(11),
	IN _pres_encargado varchar(100)
)
BEGIN
	UPDATE presupuesto
	SET pres_fecha_emision = _pres_fecha_emision,
		pres_fecha_recepcion = _pres_fecha_recepcion,
		pres_forma_pago = _pres_forma_pago,
		pres_lugar_trabajo = _pres_lugar_trabajo,
		pres_costo_mano_obra = _pres_costo_mano_obra,
		pres_costo_materiales = _pres_costo_materiales,
		pres_costo_total = _pres_costo_total,
		cli_codigo = _cli_codigo,
		pres_encargado = _pres_encargado
	WHERE pres_cod = _pres_cod;
END
$$

CREATE PROCEDURE PA_presupuesto_x_Cod(IN `p_pres_cod` INT(11))
BEGIN
SELECT `pres_cod`, `pres_fecha_emision`, `pres_fecha_recepcion`, `pres_forma_pago`, 
`pres_lugar_trabajo`, `pres_estado`, `pres_costo_mano_obra`, `pres_costo_materiales`, 
`pres_costo_total`, `cli_codigo`, `pres_encargado`
FROM `presupuesto`
WHERE `pres_cod` = p_pres_cod;
END
$$

CREATE PROCEDURE pa_producto_actualizar(IN `prod_codigo` INT, IN `descripcion` VARCHAR(150), IN `mar_cod` INT, IN `cat_cod` INT, IN `uni_cod` INT, IN `alm_cod` INT, IN `prov_cod` INT, IN `precio_compra` DECIMAL(8,2), IN `precio_venta` DECIMAL(8,2), IN `prod_cant` DECIMAL(8,0))
BEGIN
UPDATE producto SET
prod_nombre_comercial = descripcion,
mar_codigo = mar_cod,
cat_codigo = cat_cod,
uni_codigo = uni_cod,
alm_codigo = alm_cod,
prov_cod   = prov_cod,
prod_precio_compra = precio_compra,
prod_precio_venta = precio_venta ,
prod_cant=prod_cant WHERE prod_cod = prod_codigo;
END
$$

CREATE PROCEDURE PA_producto_x_Cod(IN `p_prod_cod` INT(11))
BEGIN
SELECT `prod_cod`, `prod_nombre_comercial`, `prod_precio_compra`, `prod_precio_venta`, `prod_cant`,
`mar_codigo`, `cat_codigo`, `uni_codigo`, `alm_codigo`, `prov_cod`
FROM `producto`
WHERE `prod_cod` = p_prod_cod;
END
$$

CREATE PROCEDURE Pa_proveedor_x_Cod(IN `p_prov_cod` INT)
BEGIN
SELECT `prov_cod`, `prov_razon_social`, `prov_ruc`, `prov_direccion`, `prov_telefono`, `prov_email`
FROM `proveedor`
WHERE `prov_cod` = p_prov_cod;
END
$$

CREATE PROCEDURE PA_Registrar_actividad(IN `p_act_cod` INT(11), IN `p_act_descripcion` VARCHAR(100), IN `p_act_costo_total` DECIMAL(8,2), IN `p_pres_cod` INT(11))
BEGIN
INSERT INTO `actividad`(`act_cod`, `act_descripcion`, `act_costo_total`, `pres_cod`) 
VALUES (p_act_cod, p_act_descripcion, p_act_costo_total, p_pres_cod);
END
$$

CREATE PROCEDURE PA_Registrar_actividad_empleado(IN `p_aemp_codigo` INT(11), IN `p_aemp_cantidad_dias` TINYINT(3) UNSIGNED, IN `p_aemp_pago_dia` DECIMAL(8,2) UNSIGNED, IN `p_aemp_total` DECIMAL(8,2) UNSIGNED, IN `p_emp_cod` INT(11), IN `p_act_cod` INT(11))
BEGIN
INSERT INTO `actividad_empleado`(`aemp_codigo`, `aemp_cantidad_dias`, `aemp_pago_dia`, `aemp_total`, 
`emp_cod`, `act_cod`) 
VALUES (p_aemp_codigo, p_aemp_cantidad_dias, p_aemp_pago_dia, p_aemp_total, 
p_emp_cod, p_act_cod);
END
$$

CREATE PROCEDURE PA_Registrar_actividad_productos(IN `p_actpro_cod` INT(11), IN `p_act_cod` INT(11), IN `p_prod_cod` INT(11), IN `p_actpro_precio` DECIMAL(8,2) UNSIGNED, IN `p_actpro_cantidad` INT(11) UNSIGNED, IN `p_actpro_total` DECIMAL(8,2) UNSIGNED)
BEGIN
INSERT INTO `actividad_productos`(`actpro_cod`, `act_cod`, `prod_cod`, `actpro_precio`, 
`actpro_cantidad`, `actpro_total`) 
VALUES (p_actpro_cod, p_act_cod, p_prod_cod, p_actpro_precio, 
p_actpro_cantidad, p_actpro_total);
END
$$

CREATE PROCEDURE PA_Registrar_almacen(IN `p_alm_nombre` VARCHAR(45), IN `p_alm_direccion` VARCHAR(100))
BEGIN
INSERT INTO `almacen`( `alm_nombre`, `alm_direccion`) 
VALUES ( p_alm_nombre, p_alm_direccion);
END
$$

CREATE PROCEDURE PA_Registrar_categoria(IN `p_cat_nombre` CHAR(8), IN `p_cat_estado` TINYINT)
BEGIN
INSERT INTO `categoria`( `cat_nombre`, `cat_estado`) 
VALUES ( p_cat_nombre, p_cat_estado);
END
$$

CREATE PROCEDURE PA_Registrar_cliente(IN `p_cli_razon_social` VARCHAR(45), IN `p_cli_ruc` VARCHAR(45), IN `p_cli_direccion` VARCHAR(45), IN `p_cli_telefono` CHAR(9), IN `p_cli_email` VARCHAR(100))
BEGIN
INSERT INTO `cliente`( `cli_razon_social`, `cli_ruc`, `cli_direccion`, 
`cli_telefono`, `cli_email`) 
VALUES (p_cli_razon_social, p_cli_ruc, p_cli_direccion, 
p_cli_telefono, p_cli_email);
END
$$

CREATE PROCEDURE PA_Registrar_compra(IN `p_comp_cod` INT(11), IN `p_comp_fecha` DATE, IN `p_comp_costo_total` DOUBLE(8,2) UNSIGNED, IN `p_comp_estado` CHAR(12), IN `p_prov_cod` INT(11))
BEGIN
INSERT INTO `compra`(`comp_cod`, `comp_fecha`, `comp_costo_total`, `comp_estado`, 
`prov_cod`) 
VALUES (p_comp_cod, p_comp_fecha, p_comp_costo_total, p_comp_estado, 
p_prov_cod);
END
$$

CREATE PROCEDURE PA_Registrar_conformidad(IN `p_conf_cod` INT(11), IN `p_conf_fecha_inicio` DATE, IN `p_conf_fecha_fin` DATE, IN `p_conf_estado` CHAR(3), IN `p_conf_act_conformidad` INT(11) UNSIGNED, IN `p_pres_cod` INT(11))
BEGIN
INSERT INTO `conformidad`(`conf_cod`, `conf_fecha_inicio`, `conf_fecha_fin`, `conf_estado`, 
`conf_act_conformidad`, `pres_cod`) 
VALUES (p_conf_cod, p_conf_fecha_inicio, p_conf_fecha_fin, p_conf_estado, 
p_conf_act_conformidad, p_pres_cod);
END
$$

CREATE PROCEDURE PA_Registrar_empleado(IN `p_emp_nombre` VARCHAR(45), IN `p_emp_ape_pat` VARCHAR(45), IN `p_emp_ape_mat` VARCHAR(45), IN `p_emp_direccion` VARCHAR(45), IN `p_emp_telefono` CHAR(9), IN `p_emp_fecha_inicio_trabajo` DATE, IN `p_emp_sexo` CHAR(1), IN `p_tdoc_cod` INT(11), IN `p_emp_numero_doc` CHAR(12), IN `p_emp_correo` VARCHAR(50))
BEGIN
INSERT INTO `empleado`( `emp_nombre`, `emp_ape_pat`, `emp_ape_mat`, 
`emp_direccion`, `emp_telefono`, `emp_fecha_inicio_trabajo`, 
`emp_sexo`, `tdoc_cod`, `emp_numero_doc`, 
`emp_correo`) 
VALUES ( p_emp_nombre, p_emp_ape_pat, p_emp_ape_mat, 
p_emp_direccion, p_emp_telefono, p_emp_fecha_inicio_trabajo, 
p_emp_sexo, p_tdoc_cod, p_emp_numero_doc, 
p_emp_correo);
END
$$

CREATE PROCEDURE PA_Registrar_marca(IN `p_mar_nombre` VARCHAR(45), IN `p_mar_estado` CHAR(8))
BEGIN
INSERT INTO `marca`( `mar_nombre`, `mar_estado`) 
VALUES ( p_mar_nombre, p_mar_estado);
END
$$

CREATE PROCEDURE PA_Registrar_orden_ejecucion(IN `p_ord_cod` INT(11), IN `p_ord_num_orden` INT(11) UNSIGNED, IN `p_ord_fecha` DATE, IN `p_ord_odm` INT(11) UNSIGNED, IN `p_ord_emisor` CHAR(100), IN `p_pres_cod` INT(11), IN `p_ord_estado` CHAR(3))
BEGIN
INSERT INTO `orden_ejecucion`(`ord_cod`, `ord_num_orden`, `ord_fecha`, `ord_odm`, 
`ord_emisor`, `pres_cod`, `ord_estado`) 
VALUES (p_ord_cod, p_ord_num_orden, p_ord_fecha, p_ord_odm, 
p_ord_emisor, p_pres_cod, p_ord_estado);
END
$$

CREATE PROCEDURE PA_Registrar_presupuesto(IN `p_pres_cod` INT(11), IN `p_pres_fecha_emision` DATE, IN `p_pres_fecha_recepcion` DATE, IN `p_pres_forma_pago` CHAR(30), IN `p_pres_lugar_trabajo` VARCHAR(45), IN `p_pres_estado` VARCHAR(45), IN `p_pres_costo_mano_obra` DECIMAL(8,2) UNSIGNED, IN `p_pres_costo_materiales` DECIMAL(8,2) UNSIGNED, IN `p_pres_costo_total` DECIMAL(8,2) UNSIGNED, IN `p_cli_codigo` INT(11), IN `p_pres_encargado` VARCHAR(100))
BEGIN
INSERT INTO `presupuesto`(`pres_cod`, `pres_fecha_emision`, `pres_fecha_recepcion`, `pres_forma_pago`, 
`pres_lugar_trabajo`, `pres_estado`, `pres_costo_mano_obra`, `pres_costo_materiales`, 
`pres_costo_total`, `cli_codigo`, `pres_encargado`) 
VALUES (p_pres_cod, p_pres_fecha_emision, p_pres_fecha_recepcion, p_pres_forma_pago, 
p_pres_lugar_trabajo, p_pres_estado, p_pres_costo_mano_obra, p_pres_costo_materiales, 
p_pres_costo_total, p_cli_codigo, p_pres_encargado);
END
$$

CREATE PROCEDURE PA_Registrar_producto(IN `p_prod_nombre_comercial` VARCHAR(150), IN `p_prod_precio_compra` DECIMAL(8,2) UNSIGNED, IN `p_prod_precio_venta` DECIMAL(8,2) UNSIGNED, IN `p_prod_cant` DECIMAL(8,0) UNSIGNED, IN `p_mar_codigo` INT(11), IN `p_cat_codigo` INT(11), IN `p_uni_codigo` INT(11), IN `p_alm_codigo` INT(11), IN `p_prov_codigo` INT)
BEGIN
INSERT INTO `producto`(`prod_nombre_comercial`, `prod_precio_compra`, `prod_precio_venta`, `prod_cant`,
`mar_codigo`, `cat_codigo`, `uni_codigo`, `alm_codigo`,`prov_cod`) 
VALUES (p_prod_nombre_comercial, p_prod_precio_compra, p_prod_precio_venta, p_prod_cant, 
p_mar_codigo, p_cat_codigo, p_uni_codigo, p_alm_codigo,p_prov_codigo);
END
$$

CREATE PROCEDURE PA_Registrar_proveedor(IN `p_prov_razon_social` CHAR(100), IN `p_prov_ruc` CHAR(11), IN `p_prov_direccion` VARCHAR(50), IN `p_prov_telefono` CHAR(9), IN `p_prov_email` CHAR(50))
BEGIN
INSERT INTO `proveedor`(`prov_razon_social`, `prov_ruc`, `prov_direccion`, 
`prov_telefono`, `prov_email`) 
VALUES (p_prov_razon_social, p_prov_ruc, p_prov_direccion, 
p_prov_telefono, p_prov_email);
END
$$

CREATE PROCEDURE PA_Registrar_tipo_documento(IN `p_tdoc_nombre` CHAR(20), IN `p_tdoc_estado` TINYINT)
BEGIN
INSERT INTO `tipo_documento`( `tdoc_nombre`,`tdoc_estado`) 
VALUES ( p_tdoc_nombre,p_tdoc_estado);
END
$$

CREATE PROCEDURE PA_Registrar_unidad_medida(IN `p_uni_descripcion` VARCHAR(45), IN `p_uni_estado` CHAR(8))
BEGIN
INSERT INTO `unidad_medida`( `uni_descripcion`, `uni_estado`) 
VALUES ( p_uni_descripcion, p_uni_estado);
END
$$

CREATE PROCEDURE Pa_registra_prod(IN `p_prod_nombre_comercial` VARCHAR(50), IN `p_prod_precio_compra` DECIMAL(8,2), IN `p_prod_precio_venta` DECIMAL(8,2), IN `p_prod_cant` DECIMAL(8,0), IN `p_mar_codigo` INT, IN `p_cat_codigo` INT, IN `p_uni_codigo` INT, IN `p_alm_codigo` INT, IN `p_prov_codigo` INT)
BEGIN
INSERT INTO `producto`(`prod_nombre_comercial`, `prod_precio_compra`, `prod_precio_venta`, `prod_cant`,
`mar_codigo`, `cat_codigo`, `uni_codigo`, `alm_codigo`,`prov_cod`) 
VALUES (p_prod_nombre_comercial, p_prod_precio_compra, p_prod_precio_venta, p_prod_cant, 
p_mar_codigo, p_cat_codigo, p_uni_codigo, p_alm_codigo,p_prov_codigo);
END
$$

CREATE PROCEDURE pa_rol_activate(IN `_rol_cod` INT(11))
BEGIN
	UPDATE rol
	SET rol_estado = 1
	WHERE rol_cod = _rol_cod;
END
$$

CREATE PROCEDURE pa_rol_deactivate(IN `_rol_cod` INT(11))
BEGIN
	UPDATE rol
	SET rol_estado = 2
	WHERE rol_cod = _rol_cod;
END
$$

CREATE PROCEDURE pa_rol_delete(IN `_rol_cod` INT(11))
BEGIN
	UPDATE rol
	SET rol_estado = 0
	WHERE rol_cod = _rol_cod;
END
$$

CREATE PROCEDURE pa_rol_getByID(IN `_rol_cod` INT(11))
BEGIN
	SELECT rol_cod, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE rol.rol_cod = _rol_cod;
END
$$

CREATE PROCEDURE pa_rol_getRow(IN `_rol_cod` INT(11))
BEGIN
	SELECT rol_cod, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE rol.rol_cod = _rol_cod;
END
$$

CREATE PROCEDURE pa_rol_insert(IN `_rol_nombre` VARCHAR(50), OUT `_rol_cod` INT(11))
BEGIN
	INSERT INTO rol (
		rol_nombre,
		rol_fecha_reg,
		rol_estado
	)
	VALUES (
		_rol_nombre,
		NOW(),
		1
	);
	SET _rol_cod = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_rol_list(IN `_buscar` VARCHAR(50), IN `_rol_estado` TINYINT UNSIGNED)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT rol_cod, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE (rol.rol_nombre LIKE _buscar)
		AND rol.rol_estado = _rol_estado;
END
$$

CREATE PROCEDURE pa_rol_listCbo(IN `_rol_cod` INT(11))
BEGIN
	SELECT rol_cod, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE rol.rol_estado = 1 OR (rol.rol_cod = _rol_cod);
END
$$

CREATE PROCEDURE pa_rol_update(IN `_rol_cod` INT(11), IN `_rol_nombre` VARCHAR(50))
BEGIN
	UPDATE rol
	SET rol_nombre = _rol_nombre
	WHERE rol_cod = _rol_cod;
END
$$

CREATE PROCEDURE PA_tipo_documento_x_Cod(IN `p_tdoc_cod` INT(11))
BEGIN
SELECT `tdoc_cod`, `tdoc_nombre`
FROM `tipo_documento`
WHERE `tdoc_cod` = p_tdoc_cod;
END
$$

CREATE PROCEDURE PA_unidad_medida_x_Cod(IN `p_uni_codigo` INT(11))
BEGIN
SELECT `uni_codigo`, `uni_descripcion`, `uni_estado`
FROM `unidad_medida`
WHERE `uni_codigo` = p_uni_codigo;
END
$$

CREATE PROCEDURE pa_UsuarioGetByNombre(IN `_usu_nombre` VARCHAR(50))
BEGIN
		SELECT usu_cod, usu.emp_codigo, emp_nombre, emp_ape_pat, emp_ape_mat, emp_correo,
			   usu_nombre, usu.rol_cod, rol_nombre,
			   usu_ultimo_acceso, usu_fecha_reg, usu_situacion, usu_estado
		FROM usuario usu
				 INNER JOIN empleado emp ON usu.emp_codigo = emp.emp_codigo
				 INNER JOIN rol rol ON usu.rol_cod = rol.rol_cod
		WHERE usu_nombre = _usu_nombre;
	END
$$

CREATE PROCEDURE pa_UsuarioLogin(IN `_usu_nombre` VARCHAR(50), IN `_usu_contrasena` VARCHAR(50))
BEGIN
		SELECT usu_cod, usu.emp_codigo, emp_nombre, emp_ape_pat, emp_ape_mat,
			   usu_nombre, usu.rol_cod, rol_nombre,
			   usu_ultimo_acceso, usu_fecha_reg, usu_situacion, usu_estado
		FROM usuario usu
				 INNER JOIN empleado emp ON usu.emp_codigo = emp.emp_codigo
				 INNER JOIN rol rol ON usu.rol_cod = rol.rol_cod
		WHERE usu_nombre = _usu_nombre AND usu_clave = MD5(_usu_contrasena);
	END
$$

CREATE PROCEDURE pa_UsuarioResetearContrasena(IN `_usu_cod` INT, IN `_usu_contrasena` VARCHAR(32))
BEGIN
		UPDATE usuario
		SET	usu_clave = md5(_usu_contrasena)
		WHERE  usu_cod = _usu_cod;
		SELECT row_count() AS reseteado;
	END
$$

CREATE PROCEDURE pa_usuario_activate(IN `_usu_cod` INT(11))
BEGIN
	UPDATE usuario
	SET usu_estado = 1
	WHERE usu_cod = _usu_cod;
END
$$

CREATE PROCEDURE pa_usuario_deactivate(IN `_usu_cod` INT(11))
BEGIN
	UPDATE usuario
	SET usu_estado = 2
	WHERE usu_cod = _usu_cod;
END
$$

CREATE PROCEDURE pa_usuario_delete(IN `_usu_cod` INT(11))
BEGIN
	UPDATE usuario
	SET usu_estado = 0
	WHERE usu_cod = _usu_cod;
END
$$

CREATE PROCEDURE pa_usuario_getByID(IN `_usu_cod` INT(11))
BEGIN
	SELECT usu_cod, usu.emp_codigo, emp_nombre, usu_nombre, usu_clave, usu.rol_cod, rol_nombre,
		   usu_ultimo_acceso, usu_fecha_reg, usu_situacion, usu_estado
	FROM usuario usu
		INNER JOIN empleado emp ON usu.emp_codigo = emp.emp_codigo
		INNER JOIN rol rol ON usu.rol_cod = rol.rol_cod
	WHERE usu.usu_cod = _usu_cod;
END
$$

CREATE PROCEDURE pa_usuario_getRow(IN `_usu_cod` INT(11))
BEGIN
	SELECT usu_cod, usu.emp_codigo, emp_nombre, usu_nombre, usu_clave, usu.rol_cod, rol_nombre,
		   usu_ultimo_acceso, usu_fecha_reg, usu_situacion, usu_estado
	FROM usuario usu
		INNER JOIN empleado emp ON usu.emp_codigo = emp.emp_codigo
		INNER JOIN rol rol ON usu.rol_cod = rol.rol_cod
	WHERE usu.usu_cod = _usu_cod;
END
$$

CREATE PROCEDURE PA_usuario_info(IN `_cod` INT)
SELECT u.usu_cod,u.emp_codigo,e.emp_telefono,e.emp_correo,u.usu_estado,
concat(e.emp_nombre,' ',e.emp_ape_pat) as 
'usu_nombre' FROM usuario u INNER JOIN empleado e ON e.emp_codigo = u.emp_codigo 
WHERE u.usu_cod = _cod
$$

CREATE PROCEDURE pa_usuario_insert(IN `_emp_codigo` INT(11), IN `_usu_nombre` VARCHAR(50), IN `_usu_clave` VARCHAR(50), IN `_rol_cod` INT(11), IN `_usu_situacion` CHAR(1), OUT `_usu_cod` INT(11))
BEGIN
	INSERT INTO usuario (
		emp_codigo,
		usu_nombre,
		usu_clave,
		rol_cod,
		usu_ultimo_acceso,
		usu_fecha_reg,
		usu_situacion,
		usu_estado
	)
	VALUES (
		_emp_codigo,
		_usu_nombre,
		_usu_clave,
		_rol_cod,
		NULL,
		NOW(),
		_usu_situacion,
		1
	);
	SET _usu_cod = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_usuario_list(IN `_buscar` VARCHAR(50), IN `_usu_estado` TINYINT UNSIGNED)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT usu_cod, usu.emp_codigo, emp_nombre, usu_nombre, usu_clave, usu.rol_cod, rol_nombre,
		   usu_ultimo_acceso, usu_fecha_reg, usu_situacion, usu_estado
	FROM usuario usu
		INNER JOIN empleado emp ON usu.emp_codigo = emp.emp_codigo
		INNER JOIN rol rol ON usu.rol_cod = rol.rol_cod
	WHERE (usu.usu_nombre LIKE _buscar)
		;
END
$$

CREATE PROCEDURE pa_usuario_listCbo(IN `_usu_cod` INT(11))
BEGIN
	SELECT usu_cod, usu.emp_codigo, emp_nombre, usu_nombre, usu_clave, usu.rol_cod, rol_nombre,
		   usu_ultimo_acceso, usu_fecha_reg, usu_situacion, usu_estado
	FROM usuario usu
		INNER JOIN empleado emp ON usu.emp_codigo = emp.emp_codigo
		INNER JOIN rol rol ON usu.rol_cod = rol.rol_cod
	WHERE usu.usu_estado = 1 OR (usu.usu_cod = _usu_cod);
END
$$

CREATE PROCEDURE pa_usuario_update(IN `_usu_cod` INT(11), IN `_emp_codigo` INT(11), IN `_usu_nombre` VARCHAR(50), IN `_rol_cod` INT(11), IN `_usu_situacion` CHAR(1))
BEGIN
	UPDATE usuario
	SET emp_codigo = _emp_codigo,
		usu_nombre = _usu_nombre,
		rol_cod = _rol_cod,
		usu_situacion = _usu_situacion
	WHERE usu_cod = _usu_cod;
END
$$

CREATE PROCEDURE PA_usuario_verificar(IN `_usuario` CHAR(50), IN `_clave` CHAR(50))
SELECT u.usu_cod,u.emp_codigo,e.emp_telefono,e.emp_correo,u.usu_estado,
concat(e.emp_nombre,' ',e.emp_ape_pat) as 
'usu_nombre' FROM usuario u INNER JOIN empleado e ON e.emp_codigo = u.emp_codigo 
WHERE u.usu_nombre = _usuario AND u.usu_clave = _clave
$$

DELIMITER ;

INSERT INTO almacen VALUES
(0, 'almacen3', 'direccion3'),
(1, 'Almacen1', 'S/N'),
(2, 'Almacen2', 'S/N'),
(3, 'Almacen4', 'direccion4'),
(5, 'almacen5', 'almacen6');

INSERT INTO categoria VALUES
(1, 'Servicio', 1),
(2, 'Producto', 1),
(9, 'Material', 0);

INSERT INTO cliente VALUES
(1, 'TESTEO3', 'TESTEO2', 'TESTEO2', 'TESTEO2', 'TESTEO2'),
(2, 'Testeo', '10203040604', 'S/N', '999999999', 'testeo@hotmail.com'),
(3, 'xxx', 'xxx', 'xxx', 'xxx', 'xx');

INSERT INTO marca VALUES
(1, 'prueba', 1),
(2, 'Prueba2', 1),
(3, 'Marcados', 1),
(6, 'Prueba3', 0);

INSERT INTO proveedor VALUES
(1, 'Proveedor', '10232356561', 'lurigancho', '000000', 'no tiene'),
(2, 'Prueba', '10471215231', 's/n', '947125315', 'prueba@mail.com');

INSERT INTO rol VALUES
(1, 'Admin', '2019-05-29 23:55:42', 0),
(2, 'Admin', '2019-05-30 11:54:15', 1),
(3, 'Compras', '2019-05-30 11:54:34', 1),
(5, 'erewr', '2019-05-30 11:54:57', 0),
(6, 'Ventas', '2019-05-30 11:55:16', 0),
(7, 'Ventas', '2019-05-30 11:56:08', 0),
(8, 'Ventas', '2019-05-30 11:56:10', 0),
(14, 'Nuevo', '2019-05-30 12:23:57', 0),
(15, 'erer', '2019-05-30 12:55:55', 0),
(16, 'Gerente', '2019-06-13 13:27:10', 1);

INSERT INTO tipo_documento VALUES
(1, 'DNI', 1),
(2, 'PPT', 1),
(6, 'Pasaporte', 1),
(7, 'prueba', 0),
(8, 'nada', 1);

INSERT INTO unidad_medida VALUES
(1, 'prueba0', 0),
(2, 'PPT', 1),
(3, 'Prueba3', 1),
(4, 'prueba6', 1),
(5, 'Prueba5', 1);


-- Table bd_presupuesto_cruz.compra does not contain any data (it is empty)

INSERT INTO empleado VALUES
(1, 'Eduardo', 'Cruz', 'Montenegro', 'Nvo. Chimbote', '955748771', '2019-05-01', '2019-12-31', 1, 0, 1, '47121523', 'thewil_ed@hotmail.com'),
(2, 'Yhoni', 'Pulido', 'Vasquez', 'Chimbote', '042585698', '2019-05-01', '2019-08-22', 1, 0, 1, '54654654', 'yhon@hotmail.com'),
(3, 'Ingrid', 'Principe', 'Guerra', 'Nvo.Chimbote', '045859698', '2018-08-02', '2019-06-21', 1, 1, 1, '54545466', 'ingrid@hotmail.com');

INSERT INTO presupuesto VALUES
(1, '2019-07-03', '2019-07-06', 'contado', 'chimbote', '1', 200.00, 115.00, 250.00, 1, ''),
(2, '2019-07-03', '2019-07-03', 'XD', 'LIMA', '1', 200.00, 822.00, 250.00, 1, ''),
(3, '2019-07-03', '2019-07-03', 'XD', 'LIMA', '1', 200.00, 822.00, 250.00, 1, ''),
(4, '2019-07-03', '2019-07-05', 'CONTADO', 'LIMA', '1', 200.00, 135.00, 250.00, 1, ''),
(5, '2019-07-03', '2019-07-05', 'CONTADO', 'LIMA', '1', 200.00, 135.00, 250.00, 1, ''),
(6, '2019-07-03', '2019-07-05', 'CONTADO', 'LIMA', '1', 200.00, 135.00, 250.00, 1, ''),
(7, '2019-07-03', '2019-07-05', 'CONTADO', 'LIMA', '1', 200.00, 135.00, 250.00, 1, ''),
(8, '2019-07-03', '2019-07-05', 'CONTADO', 'LIMA', '1', 200.00, 135.00, 250.00, 1, ''),
(9, '2019-07-03', '2019-07-04', 'contado', 'chimbote', '1', 200.00, 500.00, 250.00, 1, ''),
(10, '2019-07-03', '2019-07-06', 'contado', 'chimbote', '1', 360.00, 211.00, 365.00, 1, ''),
(11, '2019-07-03', '2019-07-06', 'contado', 'Contado', '1', 120.00, 122.00, 242.00, 1, '');

INSERT INTO producto VALUES
(3, 'Tuerca', 14.00, 12.00, 10, NULL, 6, 2, 4, 3),
(4, 'DESMANTELAMIENTO', 100.00, 100.00, 1, 1, 2, 1, 4, 2),
(5, 'PRUEBA2', 10.00, 5.00, 100, NULL, 1, 1, 1, 1),
(6, 'prueba', 10.00, 11.00, 12, 1, 1, 1, 1, 1),
(9, 'PINTURA', 100.00, 100.00, 1, 2, 2, 1, 3, 1),
(10, 'LAPTOP', 230.00, 250.00, 8, 1, 1, 1, 2, 0),
(11, 'LAPTOP2', 2506.00, 2502.00, 2, 1, 2, 2, 2, 5);


-- Table bd_presupuesto_cruz.actividad does not contain any data (it is empty)


-- Table bd_presupuesto_cruz.compra_detalle does not contain any data (it is empty)


-- Table bd_presupuesto_cruz.conformidad does not contain any data (it is empty)

INSERT INTO detalle_presupuesto VALUES
(1, 4, 1.00, 100.00),
(1, 5, 3.00, 5.00),
(2, 4, 8.00, 100.00),
(2, 6, 2.00, 11.00),
(3, 4, 8.00, 100.00),
(3, 6, 2.00, 11.00),
(4, 5, 5.00, 5.00),
(4, 6, 10.00, 11.00),
(5, 5, 5.00, 5.00),
(5, 6, 10.00, 11.00),
(6, 5, 5.00, 5.00),
(6, 6, 10.00, 11.00),
(7, 5, 5.00, 5.00),
(7, 6, 10.00, 11.00),
(8, 5, 5.00, 5.00),
(8, 6, 10.00, 11.00),
(9, 10, 2.00, 250.00),
(10, 4, 2.00, 100.00),
(10, 6, 1.00, 11.00),
(11, 4, 1.00, 100.00),
(11, 6, 2.00, 11.00);


-- Table bd_presupuesto_cruz.orden_ejecucion does not contain any data (it is empty)

INSERT INTO usuario VALUES
(1, 1, 'admin', '202cb962ac59075b964b07152d234b70', 2, '2019-05-30 00:49:18', '2019-05-30 00:49:25', '1', '1'),
(3, 2, 'compras', '55f584bac6a0782b4d032b4ddc18ed57', 3, NULL, '2019-05-30 13:01:32', '1', '1'),
(5, 3, 'gerente', '5c515b74ab026af01b196f3d044f744c', 16, NULL, '2019-05-30 13:02:58', '1', '1'),
(6, 1, 'thewil', '2895db886ca73a30ba7437e3cdee5b8e', 16, NULL, '2019-06-26 04:43:19', '1', '1');


-- Table bd_presupuesto_cruz.actividad_empleado does not contain any data (it is empty)


-- Table bd_presupuesto_cruz.actividad_productos does not contain any data (it is empty)

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;